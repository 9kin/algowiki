Решето Эратосфена
=================================

Решето Эратосфена — это алгоритм, позволяющий найти все простые числа в отрезке [1; n] за :math:`O(n \log \log n)` операций.

Идея проста — запишем ряд чисел :math:`1 \ldots n`. Мы помечаем все правильные кратные 2 (так как 2 - наименьшее простое число) как составные. Правильное кратное число X, это число больше, чем X и делится на X, Затем мы находим следующее число, которое не было помечено как составное, в данном случае это 3. Это означает, что 3 - простое число, и мы помечаем все надлежащие кратные 3 как составные. Следующим немаркированным числом является 5, которое является следующим простым числом, и мы помечаем все его кратные числа. И мы продолжаем эту процедуру, пока не обработаем все числа в строке.

На рисунке визуализация алгоритма для вычисления всех простых чисел в диапазоне :math:`[1; 16]`. Видно, что довольно часто мы помечаем числа как составные несколько раз.

.. image:: /static/sieve_eratosthenes.png

.. code-block:: cpp

	int n;
	vector<char> is_prime(n + 1, true);
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i <= n; i++) {
	    if (is_prime[i] && (long long)i * i <= n) {
	        for (int j = i * i; j <= n; j += i)
	            is_prime[j] = false;
	    }
	}

При такой реализации алгоритм потребляет :math:`O(n)` памяти (что очевидно) и выполняет :math:`O (n \log \log n)` действий.